import jdk.javadoc.doclet.DocletEnvironment;
import org.fusesource.jansi.AnsiConsole;

import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.List;
import java.util.Scanner;

public class Main {

    private static final int PORT = 1234;
    private static boolean end_client = false;
    private static boolean testing_attack = false;
    public static void delayedOutput(String output){

        for(int k = 0;k<output.length();k++){
            try {
                Thread.sleep(6);

            } catch (InterruptedException ignored) {}
            System.out.print(output.charAt(k));
        }
        System.out.println("\n");

    }

    public static void delayedOutput(String output, int delay){

        for(int k = 0;k<output.length();k++){

            try {
                Thread.sleep(delay);

            } catch (InterruptedException ignored) {}
            System.out.print(output.charAt(k));
        }
        System.out.println("\n");
    }

    public static void main(String[] args) {
        AnsiConsole.systemInstall();

        System.out.println("1. Join a Game");
        System.out.println("2. Host a Game");
        System.out.print("Choose an option: ");

        try (Scanner scanner = new Scanner(System.in)) {
            int option = scanner.nextInt();

            if (option == 1) {
                scanner.nextLine();
                System.out.print("Entrez votre prénom: ");
                String playerName = scanner.nextLine();
                System.out.print("Entrez l'adresse IP de votre adversaire: ");
                String otherPlayerIP = scanner.nextLine();
                connectToOtherPlayer(playerName, otherPlayerIP);
            } else if (option == 2) {
                scanner.nextLine();
                System.out.print("Entrez votre prénom: ");
                String playerName = scanner.nextLine();
                startServer(playerName);
            } else {
                System.out.println("Invalid option. Exiting.");
            }
        }
    }

    public static void Testing_attack() {
        System.out.println("ok ça marche.");
    }



    private static void connectToOtherPlayer(String playerName, String otherPlayerIP) {
        try (Socket socket = new Socket(otherPlayerIP, PORT)) {
            System.out.println("Connected to the other player.");

            new Thread(() -> handleIncomingMessages(socket)).start();

            System.out.println("Lancez une attaque parmis les suivantes:");
            System.out.println("[1] - Ransomware\n[2] - Reconnaissance\n[3] - Ddos\n");

            String attaque = new Scanner(System.in).nextLine();
            ExploitFramework ef = new ExploitFramework();

            switch (attaque){

                case "1":

                    break;

                case "2":

                    break;

                case "3":

                    break;

                default:
                    break;

            }




            try (PrintWriter writer = new PrintWriter(socket.getOutputStream(), true)) {
                    writer.println(attaque);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }    public static void simulateBlinkingCursor() {
        boolean cursorVisible = true;

        for (int i = 0; i < 6; i++) {
            System.out.print("\r");

            if (cursorVisible) {
                System.out.print("█");
            } else {
                System.out.print(" ");
            }

            cursorVisible = !cursorVisible;

            try {
                Thread.sleep(150);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

    }

    private static void startServer(String playerName) {
        try (ServerSocket serverSocket = new ServerSocket(PORT)) {
            System.out.println("En attente d'adversaire...");
            System.out.println("Votre adresse IP est: " + getLocalIpAddress());

            //Socket socket = serverSocket.accept();
            System.out.println("Connexion effectuée.");
            DefenseManager defman = new DefenseManager();

            boolean done = false;
            delayedOutput("Vous devez à tout prix protéger votre entreprise.\nInstallez des \u001B[34mdéfenses.\u001B[0m");
            while(!done) {
                delayedOutput(defman.print_info(), 1);
                simulateBlinkingCursor();
                delayedOutput("Installez une défense parmis les suivantes:");
                delayedOutput("\u001B[34mAntivirus__________\u001B[0m");
                delayedOutput("[1] - Ariva economy \u001B[36m$" +new AntivirusLevel1().getPrice()+ "\u001B[0m \n[2] - AI Protect Pro \u001B[36m$" +new AntivirusLevel2().getPrice()+ "\u001B[0m \n[3] - CyberSecure MegaDefender 9000 Ultra Turbo Extreme Edition \u001B[36m$" +new AntivirusLevel3().getPrice()+ "\u001B[0m \n");

                delayedOutput("\u001B[33mFirewall__________\u001B[0m");
                delayedOutput("[4] - Bicrosoft Firewall \u001B[36m$" +new FirewallLevel1().getPrice()+ "\u001B[0m \n[5] - FenceGuard lite \u001B[36m$" +new FirewallLevel2().getPrice()+ "\u001B[0m \n[6] - FortressPro Elite Security Suite \u001B[36m$" +new FirewallLevel3().getPrice()+ "\u001B[0m \n");

                delayedOutput("\u001B[35mChiffrement__________\u001B[0m");
                delayedOutput("[7] - SecureLite Encryptor \u001B[36m$" +new ChiffrementLevel1().getPrice()+ "\u001B[0m \n[8] - CipherGuard 360 Standard Edition \u001B[36m$" +new ChiffrementLevel2().getPrice()+ "\u001B[0m \n[9] - QuantumShield Pro Cryptographic Suite, Maximum Edition \u001B[36m$" +new ChiffrementLevel3().getPrice()+ "\u001B[0m \n");

                delayedOutput("\u001B[32mFurtivité__________\u001B[0m");
                delayedOutput("[10] - SudVPN \u001B[36m$" +new ObfuscLevel1().getPrice()+ "\u001B[0m \n[11] - CipherGuard 360 Standard Edition \u001B[36m$" +new ObfuscLevel2().getPrice()+ "\u001B[0m \n[12] - QuantumCloak Pro Stealth Enhancer Supreme Ultra Mega Cybernetic Guardian \u001B[36m$" +new ObfuscLevel3().getPrice()+ "\u001B[0m \n");

                simulateBlinkingCursor();
                System.out.print("\nadmin@"+playerName+":~#");

                String software = new Scanner(System.in).nextLine();

                switch (software) {

                    case "1":
                        defman.installSoftware(new AntivirusLevel1());
                        break;

                    case "2":
                        defman.installSoftware(new AntivirusLevel2());
                        break;

                    case "3":
                        defman.installSoftware(new AntivirusLevel3());
                        break;

                    case "4":
                        defman.installSoftware(new FirewallLevel1());
                        break;

                    case "5":
                        defman.installSoftware(new FirewallLevel2());
                        break;

                    case "6":
                        defman.installSoftware(new FirewallLevel3());
                        break;

                    case "7":
                        defman.installSoftware(new ChiffrementLevel1());
                        break;

                    case "8":
                        defman.installSoftware(new ChiffrementLevel2());
                        break;

                    case "9":
                        defman.installSoftware(new ChiffrementLevel3());
                        break;

                    case "10":
                        defman.installSoftware(new ObfuscLevel1());
                        break;

                    case "11":
                        defman.installSoftware(new ObfuscLevel2());
                        break;

                    case "12":
                        defman.installSoftware(new ObfuscLevel3());
                        break;




                    case "13":
                        done = true;
                        break;

                    default:
                        break;

                }

            }

            System.out.println(defman.getInstalledSoftware());
            defman.getScores();
            //new Thread(() -> handleIncomingMessages(socket)).start();
            while(true){
                 String message = new Scanner(System.in).nextLine();

            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static String getLocalIpAddress() {
        try (Socket socket = new Socket("google.com", 80)) {
            return socket.getLocalAddress().getHostAddress();
        } catch (IOException e) {
            e.printStackTrace();
            return "N/A";
        }
    }

    private static void handleIncomingMessages(Socket socket) {
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()))) {
            String line;
            while ((line = reader.readLine()) != null) {
                if(line.equals("test_attack")) {
                    Testing_attack();
                }
            }
        } catch (IOException ignored) {}
        finally {
            try {
                socket.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}
