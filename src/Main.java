import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.List;
import java.util.Scanner;

public class Main {

    private static final int PORT = 1234;
    private static boolean end_client = false;
    private static boolean testing_attack = false;

    public static void main(String[] args) throws InterruptedException {
        System.out.println("1. Join a Game");
        System.out.println("2. Host a Game");
        System.out.print("Choose an option: ");

        try (Scanner scanner = new Scanner(System.in)) {
            int option = scanner.nextInt();

            if (option == 1) {
                scanner.nextLine();
                System.out.print("Enter your name: ");
                String playerName = scanner.nextLine();
                System.out.print("Enter the other player's IP address: ");
                String otherPlayerIP = scanner.nextLine();
                connectToOtherPlayer(playerName, otherPlayerIP);
            } else if (option == 2) {
                scanner.nextLine();
                System.out.print("Enter your name: ");
                String playerName = scanner.nextLine();
                startServer(playerName);
            } else {
                System.out.println("Invalid option. Exiting.");
            }
        }
    }

    public static void Testing_attack() {
        System.out.println("ok Ã§a marche.");
    }

    private static void connectToOtherPlayer(String playerName, String otherPlayerIP) {
        try (Socket socket = new Socket(otherPlayerIP, PORT)) {
            System.out.println("Connected to the other player.");

            new Thread(() -> handleIncomingMessages(socket)).start();

            System.out.println("Lancez une attaque parmis les suivantes:");
            System.out.println("[1] - Ransomware\n[2] - Reconnaissance\n[3] - Ddos\n");

            String attaque = new Scanner(System.in).nextLine();
            switch (attaque){

                case "1":

                    break;

                case "2":

                    break;

                case "3":

                    break;

                default:
                    break;

            }




            try (PrintWriter writer = new PrintWriter(socket.getOutputStream(), true)) {
                    writer.println(attaque);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void startServer(String playerName) throws InterruptedException {
        try (ServerSocket serverSocket = new ServerSocket(PORT)) {
            System.out.println("Waiting for the other player to connect...");
            System.out.println("Your IP address is: " + getLocalIpAddress());

            Socket socket = serverSocket.accept();
            System.out.println("The other player connected.");
            DefenseManager defman = new DefenseManager();
            defman.installSoftware(new AntivirusLevel1());
            System.out.println(defman.getInstalledSoftware());
            new Thread(() -> handleIncomingMessages(socket)).start();
            while(true){
                 String message = new Scanner(System.in).nextLine();

            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static String getLocalIpAddress() {
        try (Socket socket = new Socket("google.com", 80)) {
            return socket.getLocalAddress().getHostAddress();
        } catch (IOException e) {
            e.printStackTrace();
            return "N/A";
        }
    }

    private static void handleIncomingMessages(Socket socket) {
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()))) {
            String line;
            while ((line = reader.readLine()) != null) {
                if(line.equals("test_attack")) {
                    Testing_attack();
                }
            }
        } catch (IOException ignored) {}
        finally {
            try {
                socket.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}
